openapi: 3.0.0
info:
  title: Movie Booking API
  version: 1.0.0
  description: Comprehensive API documentation for the Movie Booking System.

servers:
  - url: http://localhost:5000
    description: Development server

tags:
  - name: Movies
    description: Endpoints for managing movies
  - name: Showtimes
    description: Endpoints for managing showtimes
  - name: Theatres
    description: Endpoints for managing theatres
  - name: Users
    description: Endpoints for user registration, authentication, and actions

paths:
  /api/movies:
    get:
      summary: Get all movies
      tags:
        - Movies
      responses:
        200:
          description: A list of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
    post:
      summary: Add a new movie
      tags:
        - Movies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        201:
          description: Movie created successfully
        400:
          description: Validation error

  /api/movies/{id}:
    get:
      summary: Get a movie by ID
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the movie
      responses:
        200:
          description: Movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        404:
          description: Movie not found
    put:
      summary: Update a movie by ID
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the movie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        200:
          description: Movie updated successfully
        404:
          description: Movie not found
    delete:
      summary: Delete a movie by ID
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the movie
      responses:
        204:
          description: Movie deleted successfully
        404:
          description: Movie not found

  /api/showtimes:
    get:
      summary: Get all showtimes
      tags:
        - Showtimes
      responses:
        200:
          description: A list of showtimes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Showtime'
    post:
      summary: Create a new showtime
      tags:
        - Showtimes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Showtime'
      responses:
        201:
          description: Showtime created successfully
        400:
          description: Validation error

  /api/showtimes/{id}:
    get:
      summary: Get a showtime by ID
      tags:
        - Showtimes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the showtime
      responses:
        200:
          description: Showtime details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Showtime'
        404:
          description: Showtime not found
    put:
      summary: Update a showtime by ID
      tags:
        - Showtimes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the showtime
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Showtime'
      responses:
        200:
          description: Showtime updated successfully
        404:
          description: Showtime not found
    delete:
      summary: Delete a showtime by ID
      tags:
        - Showtimes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the showtime
      responses:
        204:
          description: Showtime deleted successfully
        404:
          description: Showtime not found

  /api/showtimes/movie/{movieId}/date/{date}:
    get:
      summary: Get showtimes by a specific movie and date
      tags:
        - Showtimes
      parameters:
        - name: movieId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the movie
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date
          description: The date of the showtime in YYYY-MM-DD format
      responses:
        200:
          description: List of showtimes for the specified movie and date
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Showtime'
        400:
          description: Invalid movie ID or other validation errors
        404:
          description: No showtimes found for the specified criteria

  /api/showtimes/book:
    post:
      summary: Book a seat for a showtime
      tags:
        - Showtimes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                showtimeId:
                  type: string
                  description: ID of the showtime to book
                  example: "64b9f4e7b9d17c001ed3c8f2"
                seatNumber:
                  type: string
                  description: Seat number to be booked
                  example: "A10"
                userId:
                  type: string
                  description: ID of the user making the booking
                  example: "648f4d6b9f2b500123f78abc"
              required:
                - showtimeId
                - seatNumber
      responses:
        200:
          description: Booking successful
        400:
          description: Invalid data or validation errors
        404:
          description: Showtime not found

  /api/theatre:
    get:
      summary: Get all theatres
      tags:
        - Theatres
      responses:
        200:
          description: A list of theatres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theatre'
    post:
      summary: Create a new theatre
      tags:
        - Theatres
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theatre'
      responses:
        201:
          description: Theatre created successfully
        400:
          description: Validation error

  /api/theatre/{id}:
    get:
      summary: Get a theatre by ID
      tags:
        - Theatres
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the theatre
      responses:
        200:
          description: Theatre details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theatre'
        404:
          description: Theatre not found
    put:
      summary: Update a theatre by ID
      tags:
        - Theatres
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the theatre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theatre'
      responses:
        200:
          description: Theatre updated successfully
        404:
          description: Theatre not found
    delete:
      summary: Delete a theatre by ID
      tags:
        - Theatres
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the theatre
      responses:
        204:
          description: Theatre deleted successfully
        404:
          description: Theatre not found

  /api/user/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        201:
          description: User registered successfully
        400:
          description: Validation error

  /api/user/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        200:
          description: Login successful
        401:
          description: Unauthorized

  /api/user/profile:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile data
        401:
          description: Unauthorized
    put:
      summary: Update user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        200:
          description: Profile updated successfully
        401:
          description: Unauthorized
